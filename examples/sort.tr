// RUN: %trill --run %s

func compare(_ _a: *Void, _ _b: *Void) -> Int32 {
  let a = *(_a as *Int)
  let b = *(_b as *Int)
  if a == b { return 0 }
  if a < b { return -1 }
  return 1
}

func print(_ name: *Int8) {
  printf("%s\n", name)
}

func print(_ nums: *Int, _ count: Int) {
  printf("[")
  for var i = 0; i < count; i += 1 {
    printf("%d", nums[i])
    if i < count - 1 {
      printf(", ")
    }
  }
  printf("]\n")
}

func main() {
  let count = 10
  var nums = malloc(count * sizeof(Int)) as *Int
  for var i = 0; i < count; i += 1 {
    nums[i] = arc4random_uniform(count as UInt32) as Int
  }
  print(nums, count)
  qsort(nums as *Void, count, sizeof(Int), compare)
  print(nums, count)
  free(nums as *Void)
}
