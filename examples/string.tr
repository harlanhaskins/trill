// RUN: %trill --run %s -emit ast

foreign func isprint(_: Int8) -> Int

var SEEK_SET = 0 as Int32
var SEEK_END = 2 as Int32
var EOF = -1 as Int8

func putc(_ c: Int8) {
  putchar(c as Int32)
}

extension String {
  func printCStrings() {
    var lastNonPrintable = 0 as *Int8
    for var i = 0; i < self.length; i += 1 {
      var ptr = &self._storage.bytes[i]
      var c = self._storage.bytes[i]
      var length = (ptr as Int) - (lastNonPrintable as Int)
      if c == (0 as Int8) && (length > 4) {
        printf("%s\n", &lastNonPrintable[1])
      }
      if isprint(c) == 0 || c == '\n' {
        lastNonPrintable = ptr
      }
    }
  }
}

func readInput() -> String {
  var s = String()
  var bufsize = 256
  var buf = calloc(bufsize, sizeof(Int8))  as *Int8
  var n = 0
  while true {
    var c = getchar() as Int8
    if c == EOF { break }
    if n == bufsize {
      s.append(buf, length: bufsize)
      n = 0
    }
    buf[n] = c
    n += 1
  }
  if n > 0 {
    s.append(buf, length: n + 1)
  }
  return s
}

func read(file: *Int8) -> String {
  var f = fopen(file, "rb")
  fseek(f, 0, SEEK_END)
  var fsize = ftell(f)
  fseek(f, 0, SEEK_SET)

  var str = calloc(0, fsize + 1) as *Int8
  fread(str as *Void, fsize, 1, f)
  fclose(f)
  str[fsize] = 0 as Int8
  let string = String(cString: str)
  free(str as *Void)
  return string
}

func main(argc: Int, argv: **Int8) {
  var s: String
  if argc < 2 {
    s = readInput()
  } else {
    s = read(file: argv[1])
  }
  s.printCStrings()
}
