let nested = (1, (2, 3), (4, 5, (6, 7)))
let large = (3, 4, 5, true, "Hello, World!", true, 3, nested)
extension Bool {
  func str() -> String {
    return self ? "true" : "false"
  }
}

func foo(tuple: (Int, Bool)) -> (Int, Bool) {
  printf("(%d, %s)\n", tuple.0, tuple.1 ? "true" : "false")
  return (tuple.0 + 1, !tuple.1)
}

func main() {
  printf("large: (%d, %d, %d, %s, \"%s\", %s, %d)\n", large.0, large.1, large.2, large.3.str().cString, large.4, large.5.str().cString, large.6)
  printf("nested: (%d, (%d, %d), (%d, %d, (%d, %d)))\n", nested)
  // var t = (2, false)
  // for var i = 0; i < 100; i += 1 {
  //   t = foo(tuple: t)
  // }
}
