// RUN: %trill --run %s

foreign func sleep(_: Int)

func _Thread_invoke(_ thread: *Void) -> *Void {
    (thread as Thread)._run()
    return nil
}

indirect type Thread {
    let _pthread: pthread_t
    let number: Int

    init(number: Int) {
        self.number = number
        self._pthread = nil
    }
    func run() {
        printf("Running thread #%d\n", self.number)
        pthread_create(&self._pthread, nil, _Thread_invoke, self as *Void)
    }
    func _run() {
        while true {
            printf("Thread #%d reporting!\n", self.number)
            sleep((rand() % 5) as Int)
        }
    }
    func stop() {
        pthread_cancel(self._pthread)
    }
    deinit {
        pthread_detach(self._pthread)
    }
}

func main() {
    let count = 100
    var threads = AnyArray(capacity: count)
    for var i = 0; i < count; i += 1 {
        let t = Thread(number: i)
        threads.append(t)
        t.run()
    }
    sleep(5)
    for var i = 0; i < threads.count; i += 1 {
        (threads[i] as Thread).stop()
    }
}
