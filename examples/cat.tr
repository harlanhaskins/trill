foreign func sleep(_: Int)

func usage() {
  printf("usage: %s [file]", #file)
}

func bar() -> Int {
  return 100
}

var foo = malloc(bar()) as *Int8

func main(argc: Int, argv: **Int8) -> Int {
  if argc < 2 {
    usage()
    return 1
  }
  foo[0] = 's'
  foo[10] = 0
  printf("%s", bar)
  for var i = 1; i < argc; i += 1 {
    var f = fopen(argv[i], "r")
    if f == nil {
        printf("could not open file %s\n", argv[i])
        return 1
    }
    var buf = malloc(100) as *Int8
    var s = buf
    while true {
      s = fgets(s, 100 as Int32, f)
      if s == nil { break }
      printf("%s", s)
    }
    free(s as *Void)
    fclose(f)
  }
  return 0
}
