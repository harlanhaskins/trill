#!/usr/bin/env python
#
# build-script
#
# Copyright 2016-2017 the Trill project authors.
# Licensed under the MIT License.
#
# Full license text available at https://github.com/trill-lang/trill
#
"""
A convenience script for invoking CMake.
"""
from __future__ import print_function
import argparse
import os
import os.path as path
import shutil
import subprocess
import sys
from distutils.spawn import find_executable


def error(msg):
    """
    Prints an error message and exits with a non-zero exit code.
    """
    print("error: " + msg)
    sys.exit(-1)


def run_cmake(cmake_path, args):
    """
    Invokes CMake in the `.build` directory.
    """
    source_dir = os.path.abspath(path.join(path.split(__file__)[0], os.pardir))
    suffix = 'CMake'
    if args.xcodeproj:
        suffix += '-Xcode'
    if args.release:
        suffix += '-Release'
    build_dir = path.join(source_dir, '.build', suffix)

    if args.reconfigure:
        shutil.rmtree(build_dir, ignore_errors=True)

    try:
        os.makedirs(build_dir)
    except OSError:
        # If the directory exists already, we'll get this.
        pass

    cmake_flags = {}
    if args.xcodeproj:
        if sys.platform != "darwin":
            error("xcode project generation is only available on macOS")
        cmake_flags["GENERATE_XCODEPROJ"] = "TRUE"

    cmake_flags["BUILD_TYPE"] = 'Release' if args.release else 'Debug'

    if args.swift:
        cmake_flags["SWIFT_EXEC"] = args.swift

    cmake_args = [cmake_path, source_dir]
    cmake_args += ['-DCMAKE_%s=%s' % tup for tup in cmake_flags.iteritems()]

    os.chdir(build_dir)
    subprocess.call(cmake_args)

    cmake_args = [cmake_path, '--build', '.']
    subprocess.call(cmake_args)

def main():
    """
    Runs the build script and invokes CMake.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--swift', help='Path to custom swift executable.')
    parser.add_argument('-r', '--release', action='store_true',
                        help='Build the executable in the Release ' +
                        'configuration')
    parser.add_argument('-x', '--xcodeproj', action='store_true',
                        help='Build an Xcode project for the trill compiler.')
    parser.add_argument('-t', '--test', help='Run the trill test suite.',
                        action='store_true')
    parser.add_argument('--reconfigure', action='store_true',
                        help='Delete the existing CMake files and start over')

    args = parser.parse_args()

    if args.test:
        error("tests are unsupported right now...")

    cmake_path = find_executable('cmake')
    if not cmake_path:
        error("could not find CMake executable -- ensure you've installed" +
              "CMake and it's in your PATH.")

    run_cmake(cmake_path, args)

if __name__ == "__main__":
    main()
